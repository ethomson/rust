pr: none
trigger:
- try

#variables:
#- group: real-prod-credentials

jobs:
# - job: Linux
#   timeoutInMinutes: 600
#   pool:
#     vmImage: ubuntu-16.04
#   steps:
#   - template: steps/run.yml
#   strategy:
#     matrix:
#       dist-x86_64-linux:
#         IMAGE: dist-x86_64-linux
#         DEPLOY: 1
#
#       dist-x86_64-linux-alt:
#         IMAGE: dist-x86_64-linux
#         DEPLOY_ALT: 1

# The macOS and Windows builds here are currently disabled due to them not being
# overly necessary on `try` builds. We also don't actually have anything that
# consumes the artifacts currently. Perhaps one day we can reenable, but for now
# it helps free up capacity on Azure.
# - job: macOS
#   timeoutInMinutes: 600
#   pool:
#     vmImage: macos-10.13
#   steps:
#   - template: steps/run.yml
#   strategy:
#     matrix:
#       dist-x86_64-apple:
#         SCRIPT: ./x.py dist
#         RUST_CONFIGURE_ARGS: --target=aarch64-apple-ios,armv7-apple-ios,armv7s-apple-ios,i386-apple-ios,x86_64-apple-ios --enable-full-tools --enable-sanitizers --enable-profiler --enable-lldb --set rust.jemalloc
#         DEPLOY: 1
#         RUSTC_RETRY_LINKER_ON_SEGFAULT: 1
#         MACOSX_DEPLOYMENT_TARGET: 10.7
#         NO_LLVM_ASSERTIONS: 1
#         NO_DEBUG_ASSERTIONS: 1
#         DIST_REQUIRE_ALL_TOOLS: 1
#
#       dist-x86_64-apple-alt:
#         SCRIPT: ./x.py dist
#         RUST_CONFIGURE_ARGS: --enable-extended --enable-profiler --enable-lldb --set rust.jemalloc
#         DEPLOY_ALT: 1
#         RUSTC_RETRY_LINKER_ON_SEGFAULT: 1
#         MACOSX_DEPLOYMENT_TARGET: 10.7
#         NO_LLVM_ASSERTIONS: 1
#         NO_DEBUG_ASSERTIONS: 1
#
# - job: Windows
#   timeoutInMinutes: 600
#   pool:
#     vmImage: 'vs2017-win2016'
#   steps:
#   - template: steps/run.yml
#   strategy:
#     matrix:
#       dist-x86_64-msvc:
#         RUST_CONFIGURE_ARGS: >
#           --build=x86_64-pc-windows-msvc
#           --target=x86_64-pc-windows-msvc,aarch64-pc-windows-msvc
#           --enable-full-tools
#           --enable-profiler
#         SCRIPT: python x.py dist
#         DIST_REQUIRE_ALL_TOOLS: 1
#         DEPLOY: 1
#
#       dist-x86_64-msvc-alt:
#         MSYS_BITS: 64
#         RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc --enable-extended --enable-profiler
#         SCRIPT: python x.py dist
#         DEPLOY_ALT: 1

#- job: Linux4
#  timeoutInMinutes: 600
#  pool:
#    name: 'linux-private'
#  steps:
#  - template: steps/run.yml
#  strategy:
#    matrix:
#      i686-gnu-nopt:
#        IMAGE: i686-gnu-nopt
#      x86_64-gnu-nopt:
#        IMAGE: x86_64-gnu-nopt

- job: Windows4
  timeoutInMinutes: 600
  pool:
    name: 'wintest'
  steps:
  - template: steps/run.yml
  strategy:
    matrix:
#       x86_64-msvc-2:
#         MSYS_BITS: 64
#         RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc --enable-profiler
#         SCRIPT: make ci-subset-2
      i686-msvc-1:
        MSYS_BITS: 32
        RUST_CONFIGURE_ARGS: --build=i686-pc-windows-msvc
        SCRIPT: make ci-subset-1
      i686-msvc-2:
        MSYS_BITS: 32
        RUST_CONFIGURE_ARGS: --build=i686-pc-windows-msvc
        SCRIPT: make ci-subset-2
#       # MSVC aux tests
#       x86_64-msvc-aux:
#         MSYS_BITS: 64
#         RUST_CHECK_TARGET: check-aux EXCLUDE_CARGO=1
#         RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc
#       x86_64-msvc-cargo:
#         MSYS_BITS: 64
#         SCRIPT: python x.py test src/tools/cargotest src/tools/cargo
#         RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc
#         VCVARS_BAT: vcvars64.bat
#       # MSVC tools tests
#       x86_64-msvc-tools:
#         MSYS_BITS: 64
#         SCRIPT: src/ci/docker/x86_64-gnu-tools/checktools.sh x.py /tmp/toolstates.json windows
#         RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc --save-toolstates=/tmp/toolstates.json --enable-test-miri
#
#       # 32/64-bit MinGW builds.
#       #
#       # We are using MinGW with posix threads since LLVM does not compile with
#       # the win32 threads version due to missing support for C++'s std::thread.
#       #
#       # Instead of relying on the MinGW version installed on appveryor we download
#       # and install one ourselves so we won't be surprised by changes to appveyor's
#       # build image.
#       #
#       # Finally, note that the downloads below are all in the `rust-lang-ci` S3
#       # bucket, but they cleraly didn't originate there! The downloads originally
#       # came from the mingw-w64 SourceForge download site. Unfortunately
#       # SourceForge is notoriously flaky, so we mirror it on our own infrastructure.
#       i686-mingw-1:
#         MSYS_BITS: 32
#         RUST_CONFIGURE_ARGS: --build=i686-pc-windows-gnu
#         SCRIPT: make ci-subset-1
#         MINGW_URL: https://rust-lang-ci2.s3.amazonaws.com/rust-ci-mirror
#         MINGW_ARCHIVE: i686-6.3.0-release-posix-dwarf-rt_v5-rev2.7z
#         MINGW_DIR: mingw32
#         # FIXME(#59637)
#         NO_DEBUG_ASSERTIONS: 1
#         NO_LLVM_ASSERTIONS: 1
#       i686-mingw-2:
#         MSYS_BITS: 32
#         RUST_CONFIGURE_ARGS: --build=i686-pc-windows-gnu
#         SCRIPT: make ci-subset-2
#         MINGW_URL: https://rust-lang-ci2.s3.amazonaws.com/rust-ci-mirror
#         MINGW_ARCHIVE: i686-6.3.0-release-posix-dwarf-rt_v5-rev2.7z
#         MINGW_DIR: mingw32
#       x86_64-mingw-2:
#         MSYS_BITS: 64
#         SCRIPT: make ci-subset-2
#         RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-gnu
#         MINGW_URL: https://rust-lang-ci2.s3.amazonaws.com/rust-ci-mirror
#         MINGW_ARCHIVE: x86_64-6.3.0-release-posix-seh-rt_v5-rev2.7z
#         MINGW_DIR: mingw64
#
#       dist-x86_64-mingw:
#         MSYS_BITS: 64
#         SCRIPT: python x.py dist
#         RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-gnu --enable-full-tools --enable-profiler
#         MINGW_URL: https://rust-lang-ci2.s3.amazonaws.com/rust-ci-mirror
#         MINGW_ARCHIVE: x86_64-6.3.0-release-posix-seh-rt_v5-rev2.7z
#         MINGW_DIR: mingw64
#         DIST_REQUIRE_ALL_TOOLS: 1
#         DEPLOY: 1
